#!/usr/bin/env python

import googauth
import os
import pwd
import shlex
import sys

def parse_gauth_config(userinfo):
    configfile = os.path.join(userinfo.pw_dir, '.google_authenticator')
    key = None
    config = {}
    onetimes = []

    with file(configfile) as f:
        for line in f:
            if key is None:
                key = line.strip()
            elif line.startswith('"'):
                bits = line.strip().split(' ', 2)
                if len(bits) == 3:
                    config[bits[1]] = bits[2]
                elif len(bits) == 2:
                    config[bits[1]] = True
            else:
                onetimes.append(line.strip())

    return key, config, onetimes

def save_gauth_config(userinfo, key, config, onetimes):
    configfile = os.path.join(userinfo.pw_dir, '.google_authenticator')
    with file(configfile, 'w') as f:
        f.write('%s\n' % (key,))
        for k, v in config.iteritems():
            f.write('" %s' % (k,))
            if v != True:
                f.write(' %s' % (v,))
            f.write('\n')
        for onetime in onetimes:
            f.write('%s\n' % (onetime,))

def login(userinfo, ssh_orig_cmd, message=None):
    if ssh_orig_cmd is not None:
        os.execvp(ssh_orig_cmd[0], ssh_orig_cmd)

    if message is not None:
        sys.stderr.wtire('%s\n' % (message,))
    shellname = os.path.basename(userinfo.pw_shell)
    os.execv(userinfo.pw_shell, ['-%s' % (shellname,)])

if __name__ == '__main__':
    ssh_orig_cmd = os.getenv('SSH_ORIGINAL_COMMAND')
    if ssh_orig_cmd is not None:
        ssh_orig_cmd = shlex.split(ssh_orig_cmd)
    user = os.getenv('USER')
    userinfo = pwd.getpwnam(user)

    try:
        key, config, onetimes = parse_gauth_config(userinfo)
    except:
        key, config, onetimes = None, None, None

    if not key:
        # Fail-safe
        login(userinfo, ssh_orig_cmd)

    try:
        attempt = raw_input('Enter auth code: ')
    except EOFError:
        sys.exit(1)

    if attempt in onetimes:
        onetimes.remove(attempt)
        #save_gauth_config(userinfo, key, config, onetimes)
        login(userinfo, ssh_orig_cmd, 'One-time code accepted.')

    window = config.get('WINDOW_SIZE', 3)
    try:
        window = int(window)
    except TypeError:
        window = 3

    #save_gauth_config(userinfo, key, config, onetimes)
    if googauth.verify_time_based(key, attempt, window) is not None:
        login(userinfo, ssh_orig_cmd, 'Code accepted.')

    sys.stderr.write('Invalid code.\n')
    sys.exit(1)
