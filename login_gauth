#!/usr/bin/env python

import json
import os
import pwd
import shlex
import shutil
import sys

import googauth
import ipaddr

CONFIGFILENAME = '.gauth.json'

def parse_gauth_config(configpath):
    config = {'secret': None,
              'window_size': 3,
              'onetimes': [],
              'whitelist_nets': [],
              'whitelist_commands': []}

    configfile = os.path.join(configpath, CONFIGFILENAME)
    try:
        with file(configfile) as f:
            config.update(json.load(f))
    except:
        pass

    return config

def save_gauth_config(configpath, config):
    configfile = os.path.join(configpath, CONFIGFILENAME)
    writefile = '%s.new' % (configfile,)
    with file(writefile, 'w') as f:
        json.dump(config, f)
    shutil.copy(writefile, configfile)
    os.unlink(writefile)

def client_is_whitelisted(whitelist, client):
    whitelisted = False
    try:
        client_ip = ipaddr.IPAddress(client)
    except:
        client_ip = None

    for item in whitelist:
        try:
            ip = ipaddr.IPAddress(item)
            if client_ip == ip:
                whitelisted = True
        except:
            try:
                net = ipaddr.IPNetwork(item)
                if client_ip in net:
                    whitelisted = True
            except:
                pass

    return whitelisted

def login(shell, ssh_orig_cmd, message=None):
    if ssh_orig_cmd is not None:
        os.execvp(ssh_orig_cmd[0], ssh_orig_cmd)

    if message is not None:
        sys.stderr.write('%s\n' % (message,))
    shellname = os.path.basename(shell)
    os.execv(shell, ['-%s' % (shellname,)])

def do_gauth():
    ssh_orig_cmd = os.getenv('SSH_ORIGINAL_COMMAND')
    if ssh_orig_cmd is not None:
        ssh_orig_cmd = shlex.split(ssh_orig_cmd)
    user = os.getenv('USER')
    userinfo = pwd.getpwnam(user)
    shell = userinfo.pw_shell
    configdir = os.getenv('LOGIN_GAUTH_TEST_DIR')
    if configdir is None:
        configdir = userinfo.pw_dir

    config = parse_gauth_config(configdir)

    if not config['secret']:
        # Fail-safe
        login(shell, ssh_orig_cmd)

    if ssh_orig_cmd is not None:
        if ssh_orig_cmd[0] in config['whitelist_commands']:
            # We've been whitelisted!
            login(shell, ssh_orig_cmd)

    ssh_client = os.getenv('SSH_CLIENT')
    if ssh_client is not None:
        ssh_client = ssh_client.split()[0]
        if client_is_whitelisted(config['whitelist_nets'], ssh_client):
            # We've been whitelisted!
            login(shell, ssh_orig_cmd)

    try:
        attempt = raw_input('Enter auth code: ')
    except EOFError:
        return 1

    if attempt in config['onetimes']:
        config['onetimes'].remove(attempt)
        save_gauth_config(configdir, config)
        login(shell, ssh_orig_cmd, 'One-time code accepted.')

    if googauth.verify_time_based(config['secret'], attempt,
                                  config['window_size']) is not None:
        login(shell, ssh_orig_cmd, 'Code accepted.')

    sys.stderr.write('Invalid code.\n')
    return 1

if __name__ == '__main__':
    sys.exit(do_gauth())
